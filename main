# -*- coding: utf8 -*-

IP = [58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4,
      62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8,
      57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3,
      61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7]

CP_1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18,
        10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36,
        63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22,
        14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4]

CP_2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4,
        26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40,
        51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]

E = [32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9,
     8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17,
     16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25,
     24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1]

S_BOX = [

    [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
     [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
     [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
     [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],
     ],

    [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
     [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
     [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
     [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],
     ],

    [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
     [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
     [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
     [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],
     ],

    [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
     [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
     [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
     [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],
     ],

    [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
     [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
     [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
     [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],
     ],

    [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
     [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
     [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
     [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],
     ],

    [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
     [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
     [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
     [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],
     ],

    [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
     [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
     [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
     [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],
     ]
]

P = [16, 7, 20, 21, 29, 12, 28, 17,
     1, 15, 23, 26, 5, 18, 31, 10,
     2, 8, 24, 14, 32, 27, 3, 9,
     19, 13, 30, 6, 22, 11, 4, 25]

IP_1 = [40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31,
        38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29,
        36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
        34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25]

SHIFT = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]


def bytetobit(text):
    bintext = list()
    for letter in text:
        if isinstance(letter, int):
            bits = bin(letter)
        else:
            bits = bin(ord(letter))

        newbits = bits.replace("b","")

        if len(newbits) > 8:
            raise Exception("value bigger than 8 bits")
        elif len(newbits) < 8:
            for i in range(8-len(newbits)):
                newbits = "0" + newbits

        bintext.extend([int(x) for x in list(newbits)])
    return bintext


def splitlist(text, length):
    return [text[k:k + length] for k in range(0, len(text), length)]  # zwraca len(text)/length list


def tostring(text):
    res = ''.join([chr(int(y, 2)) for y in [''.join([str(x) for x in _bytes]) for _bytes in splitlist(text, 8)]])
    return res


class Des:
    def __init__(self, key, text):
        if len(key) < 8:
            raise Exception("key shorter than 8 bits")
        elif len(key) >= 8:
            self.key = key[:8]

        if len(text)%8 != 0:
            self.text = text
            for i in range(8-len(text)%8):
                self.text += "$"
        else:
            self.text = text

        self.keylist = list()

    def returnkey(self):
        return self.key

    def returntext(self):
        return self.text

    def permut(self, block, table):
        return [block[x - 1] for x in table]  # permutacja

    def shift(self, g, d, n):
        return g[n:] + g[:n], d[n:] + d[:n]  # przesuniecie o n bitow

    def xor(self, list1, list2):
        return [x ^ y for x, y in zip(list1, list2)]

    def getkeys(self):
        self.keylist = []
        key1 = bytetobit(self.key)
        key1 = self.permut(key1, CP_1)  # wygenerowanie 56-bitowego klucza
        left, right = splitlist(key1, 28)
        for i in range(16):
            left, right = self.shift(left, right, SHIFT[i])
            self.keylist.append(self.permut(left + right, CP_2))  # lista 48-bitowych kluczy

    def sbox(self, array):
        result = list()
        temp = splitlist(array, 6)
        for i in range(len(temp)):
            group = temp[i]
            row = int(str(group[0]) + str(group[5]), 2)
            column = int(''.join([str(x) for x in group[1:][:-1]]), 2)
            value = S_BOX[i][row][column]
            if isinstance(value, int):
                bits = bin(value)[2:]
            else:
                bits = bin(ord(value))[2:]

            if len(bits) > 4:
                raise Exception("value bigger than 4 bits")
            elif len(bits) < 4:
                for i in range(4 - len(bits)):
                    bits = "0" + bits

            result += [int(x) for x in bits]
        return result

    def encrypt(self):
        res = list()
        self.getkeys()
        text_lists = splitlist(self.text, 8)
        for x in text_lists:
            x = bytetobit(x)
            x = self.permut(x, IP)
            left, right = splitlist(x, 32)
            for i in range(16):
                right_expand = self.permut(right, E)
                temp = self.xor(self.keylist[i], right_expand)
                temp = self.sbox(temp)
                temp = self.permut(temp, P)
                temp = self.xor(left, temp)
                left = right
                right = temp
            res += self.permut(right + left, IP_1) # tablica bitow
        final = tostring(res) # zamiana tablicy bitow na string
        return res


if __name__ == '__main__':
    key = "8787878787878787"
    text = "0E329232EA6D0D73"
    d = Des(key, text)
    # d.encrypt()
    print(d.encrypt())
